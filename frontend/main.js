String.prototype.replaceAll = function(search, replace) {
    if (replace === undefined) {
        return this.toString();
    }
    return this.split(search).join(replace);
}
const _MS_PER_DAY = 1000 * 60 * 60 * 24;

// a and b are javascript Date objects
function dateDiffInDays(a, b) {
  // Discard the time and time-zone information.
  const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());
  const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());

  return ((utc2 - utc1) / _MS_PER_DAY);
}

function findEloMax(numGames, elo0=-0.2,elo1=1.1,draw_ratio=0.825){
    var sprt=new Sprt(0.05,0.05,elo0,elo1,draw_ratio,rms_bias=0.);
    let start = elo1;
    let end = 150.;
    let i = 0;
    for (; i < 50; i++) {
        let middle = ((start + end) / 2);
        let char = sprt.characteristics(middle)[1];
        if(Math.abs(char-numGames) < 0.1) {
            return middle;
        }
        if(char < numGames) {
            end = middle;
        }
        else {
            start = middle;
        }
    }
    return end;
}

function findEloMin(numGames, elo0=-0.2,elo1=1.1,draw_ratio=0.825){
    var sprt=new Sprt(0.05,0.05,elo0,elo1,draw_ratio,rms_bias=0.);
    let start = elo0;
    let end = -150.;
    let i = 0;
    for (; i < 50; i++) {
        let middle = ((start + end) / 2);
        let char = sprt.characteristics(middle)[1];
        if(Math.abs(char-numGames) < 0.1) {
            return middle;
        }
        if(char < numGames) {
            end = middle;
        }
        else {
            start = middle;
        }
    }
    return end;
}

function eloFromScore(wins, draws, total) {
    var score = wins + draws/2;
    var percentage = (score /  total);
    return -400 * Math.log(1 / percentage - 1) / Math.LN10;
}

function eloToWinLossDiff(elo, total, draw_ratio=0.825) {
    if(elo < 0) return -eloToWinLossDiff(-elo, total, draw_ratio);
    
    let start = 0;
    let end = total;
    let i = 0;
    for (; i < 50; i++) {
        let middle = ((start + end) / 2);
        let curelo = eloFromScore(middle, draw_ratio*total, total);
        if(Math.abs(elo-curelo) < 0.1) {
            let losses = total - middle - draw_ratio*total;
            let diff = middle - losses;
            return diff;
        }
        if(curelo >= elo) {
            end = middle;
        }
        else {
            start = middle;
        }
    }
    return end;
}

// APPROXIMATIONS
let sprt_apx = [[6000,-284,313],[6500,-283,314],[7000,-282,315],[7500,-280,317],[8000,-279,318],[8500,-278,319],[9000,-276,321],[9500,-275,322],[10000,-274,323],[10500,-272,324],[11000,-271,326],[11500,-270,327],[12000,-269,328],[12500,-267,330],[13000,-266,331],[13500,-265,332],[14000,-263,334],[14500,-262,335],[15000,-261,336],[15500,-259,338],[16000,-258,339],[16500,-257,340],[17000,-255,341],[17500,-254,343],[18000,-253,344],[18500,-252,345],[19000,-250,347],[19500,-249,348],[20000,-248,349],[20500,-246,351],[21000,-245,352],[21500,-244,353],[22000,-242,355],[22500,-241,356],[23000,-240,357],[23500,-238,359],[24000,-237,360],[24500,-236,361],[25000,-234,362],[25500,-233,364],[26000,-232,365],[26500,-231,366],[27000,-229,368],[27500,-228,369],[28000,-227,370],[28500,-225,372],[29000,-224,373],[29500,-223,374],[30000,-221,376],[30500,-220,377],[31000,-219,378],[31500,-217,379],[32000,-216,381],[32500,-215,382],[33000,-214,383],[33500,-212,385],[34000,-211,386],[34500,-210,387],[35000,-208,389],[35500,-207,390],[36000,-206,391],[36500,-204,393],[37000,-203,394],[37500,-202,395],[38000,-200,396],[38500,-199,398],[39000,-198,399],[39500,-197,400],[40000,-195,402],[40500,-194,403],[41000,-193,404],[41500,-191,406],[42000,-190,407],[42500,-189,408],[43000,-187,410],[43500,-186,411],[44000,-185,412],[44500,-183,414],[45000,-182,415],[45500,-181,416],[46000,-179,417],[46500,-178,419],[47000,-177,420],[47500,-176,421],[48000,-174,423],[48500,-173,424],[49000,-172,425],[49500,-170,427],[50000,-169,428],[50500,-168,429],[51000,-166,431],[51500,-165,432],[52000,-164,433],[52500,-162,434],[53000,-161,436],[53500,-160,437],[54000,-159,438],[54500,-157,440],[55000,-156,441],[55500,-155,442],[56000,-153,444],[56500,-152,445],[57000,-151,446],[57500,-149,448],[58000,-148,449],[58500,-147,450],[59000,-145,452],[59500,-144,453],[60000,-143,454],[60500,-142,455],[61000,-140,457],[61500,-139,458],[62000,-138,459],[62500,-136,461],[63000,-135,462],[63500,-134,463],[64000,-132,465],[64500,-131,466],[65000,-130,467],[65500,-128,469],[66000,-127,470],[66500,-126,471],[67000,-124,472],[67500,-123,474],[68000,-122,475],[68500,-121,476],[69000,-119,478],[69500,-118,479],[70000,-117,480],[70500,-115,482],[71000,-114,483],[71500,-113,484],[72000,-111,486],[72500,-110,487],[73000,-109,488],[73500,-107,489],[74000,-106,491],[74500,-105,492],[75000,-104,493],[75500,-102,495],[76000,-101,496],[76500,-100,497],[77000,-98,499],[77500,-97,500],[78000,-96,501],[78500,-94,503],[79000,-93,504],[79500,-92,505],[80000,-90,506],[80500,-89,508],[81000,-88,509],[81500,-87,510],[82000,-85,512],[82500,-84,513],[83000,-83,514],[83500,-81,516],[84000,-80,517],[84500,-79,518],[85000,-77,520],[85500,-76,521],[86000,-75,522],[86500,-73,524],[87000,-72,525],[87500,-71,526],[88000,-69,527],[88500,-68,529],[89000,-67,530],[89500,-66,531],[90000,-64,533],[90500,-63,534],[91000,-62,535],[91500,-60,537],[92000,-59,538],[92500,-58,539],[93000,-56,541],[93500,-55,542],[94000,-54,543],[94500,-52,544],[95000,-51,546],[95500,-50,547],[96000,-49,548],[96500,-47,550],[97000,-46,551],[97500,-45,552],[98000,-43,554],[98500,-42,555],[99000,-41,556],[99500,-39,558],[100000,-38,559],[100500,-37,560],[101000,-35,561],[101500,-34,563],[102000,-33,564],[102500,-32,565],[103000,-30,567],[103500,-29,568],[104000,-28,569],[104500,-26,571],[105000,-25,572],[105500,-24,573],[106000,-22,575],[107000,-20,577],[108000,-17,580],[109000,-14,582],[110000,-12,585],[111000,-9,588],[112000,-7,590],[113000,-4,593],[114000,-1,596],[115000,1,598],[116000,4,601],[117000,6,603],[118000,9,606],[119000,12,609],[120000,14,611],[121000,17,614],[122000,20,617],[123000,22,619],[124000,25,622],[125000,27,624],[126000,30,627],[127000,33,630],[128000,35,632],[129000,38,635],[130000,41,637],[131000,43,640],[132000,46,643],[133000,48,645],[134000,51,648],[135000,54,651],[136000,56,653],[137000,59,656],[138000,61,658],[139000,64,661],[140000,67,664],[141000,69,666],[142000,72,669],[143000,75,672],[144000,77,674],[145000,80,677],[146000,82,679],[147000,85,682],[148000,88,685],[149000,90,687],[150000,93,690],[151000,96,692],[152000,98,695],[153000,101,698],[154000,103,700],[155000,106,703],[156000,109,706],[157000,111,708],[158000,114,711],[159000,116,713],[160000,119,716],[161000,122,719],[162000,124,721],[163000,127,724],[164000,130,727],[165000,132,729],[166000,135,732],[167000,137,734],[168000,140,737],[169000,143,740],[170000,145,742],[171000,148,745],[172000,151,747],[173000,153,750],[174000,156,753],[175000,158,755],[176000,161,758],[177000,164,761],[178000,166,763],[179000,169,766],[180000,171,768],[181000,174,771],[182000,177,774],[183000,179,776],[184000,182,779],[185000,185,782],[186000,187,784],[187000,190,787],[188000,192,789],[189000,195,792],[190000,198,795],[191000,200,797],[192000,203,800],[193000,206,802],[194000,208,805],[195000,211,808],[196000,213,810],[197000,216,813],[198000,219,816],[199000,221,818],[200000,224,821],[201000,226,823],[202000,229,826],[203000,232,829],[204000,234,831],[205000,237,834],[206000,240,837],[207000,242,839],[208000,245,842],[209000,247,844],[210000,250,847],[211000,253,850],[212000,255,852],[213000,258,855],[214000,261,857],[215000,263,860],[216000,266,863],[217000,268,865],[218000,271,868],[219000,274,871],[220000,276,873],[221000,279,876],[222000,281,878],[223000,284,881],[224000,287,884],[225000,289,886],[226000,292,889],[227000,295,892],[228000,297,894],[229000,300,897],[230000,302,899],[231000,305,902],[232000,308,905],[233000,310,907],[234000,313,910],[235000,316,912],[236000,318,915],[237000,321,918],[238000,323,920],[239000,326,923],[240000,329,926],[241000,331,928],[242000,334,931],[243000,336,933],[244000,339,936],[245000,342,939],[246000,344,941],[247000,347,944],[248000,350,947],[249000,352,949],[250000,355,952],[251000,357,954],[252000,360,957],[253000,363,960],[254000,365,962],[255000,368,965],[256000,371,967],[257500,374,971],[259000,378,975],[260500,382,979],[262000,386,983],[263500,390,987],[265000,394,991],[266500,398,995],[268000,402,999],[269500,406,1003],[271000,410,1007],[272500,414,1011],[274000,418,1015],[275500,422,1019],[277000,426,1022],[278500,429,1026],[280000,433,1030],[281500,437,1034],[283000,441,1038],[284500,445,1042],[286000,449,1046],[287500,453,1050],[289000,457,1054],[290500,461,1058],[292000,465,1062],[293500,469,1066],[295000,473,1070],[296500,477,1074],[298000,481,1077],[299500,484,1081],[301000,488,1085],[302500,492,1089],[304000,496,1093],[305500,500,1097],[307000,504,1101],[308500,508,1105],[310000,512,1109],[311500,516,1113],[313000,520,1117],[314500,524,1121],[316000,528,1125],[317500,532,1129],[319000,536,1132],[320500,539,1136],[322000,543,1140],[323500,547,1144],[325000,551,1148],[326500,555,1152],[328000,559,1156],[329500,563,1160],[331000,567,1164],[332500,571,1168],[334000,575,1172],[335500,579,1176],[337000,583,1180],[338500,587,1184],[340000,591,1187],[341500,594,1191],[343000,598,1195],[344500,602,1199],[346000,606,1203],[347500,610,1207],[349000,614,1211],[350500,618,1215],[352000,622,1219],[353500,626,1223],[355000,630,1227],[356500,634,1231],[358000,638,1235],[359500,642,1239],[361000,646,1242],[362500,649,1246],[364000,653,1250],[365500,657,1254],[367000,661,1258],[368500,665,1262],[370000,669,1266],[371500,673,1270],[373000,677,1274],[374500,681,1278],[376000,685,1282],[377500,689,1286],[379000,693,1290],[380500,697,1294],[382000,701,1298],[383500,705,1301],[385000,708,1305],[386500,712,1309],[388000,716,1313],[389500,720,1317],[391000,724,1321],[392500,728,1325],[394000,732,1329],[395500,736,1333],[397000,740,1337],[398500,744,1341],[400000,748,1345],[401500,752,1349],[403000,756,1353],[404500,759,1356],[406000,763,1360]];

let sprt60_apx = [[6000,-278,319],[6500,-276,321],[7000,-274,323],[7500,-272,324],[8000,-271,326],[8500,-269,328],[9000,-267,330],[9500,-265,332],[10000,-263,334],[10500,-261,335],[11000,-260,337],[11500,-258,339],[12000,-256,341],[12500,-254,343],[13000,-252,345],[13500,-250,346],[14000,-249,348],[14500,-247,350],[15000,-245,352],[15500,-243,354],[16000,-241,356],[16500,-239,357],[17000,-238,359],[17500,-236,361],[18000,-234,363],[18500,-232,365],[19000,-230,367],[19500,-228,368],[20000,-227,370],[20500,-225,372],[21000,-223,374],[21500,-221,376],[22000,-219,378],[22500,-217,379],[23000,-216,381],[23500,-214,383],[24000,-212,385],[24500,-210,387],[25000,-208,389],[25500,-206,390],[26000,-205,392],[26500,-203,394],[27000,-201,396],[27500,-199,398],[28000,-197,400],[28500,-195,401],[29000,-194,403],[29500,-192,405],[30000,-190,407],[30500,-188,409],[31000,-186,411],[31500,-184,412],[32000,-183,414],[32500,-181,416],[33000,-179,418],[33500,-177,420],[34000,-175,422],[34500,-173,423],[35000,-172,425],[35500,-170,427],[36000,-168,429],[36500,-166,431],[37000,-164,433],[37500,-162,434],[38000,-161,436],[38500,-159,438],[39000,-157,440],[39500,-155,442],[40000,-153,444],[40500,-151,445],[41000,-150,447],[41500,-148,449],[42000,-146,451],[42500,-144,453],[43000,-142,455],[43500,-140,456],[44000,-139,458],[44500,-137,460],[45000,-135,462],[45500,-133,464],[46000,-131,466],[46500,-129,467],[47000,-128,469],[47500,-126,471],[48000,-124,473],[48500,-122,475],[49000,-120,477],[49500,-118,478],[50000,-117,480],[50500,-115,482],[51000,-113,484],[51500,-111,486],[52000,-109,488],[52500,-107,489],[53000,-106,491],[53500,-104,493],[54000,-102,495],[54500,-100,497],[55000,-98,499],[55500,-96,500],[56000,-95,502],[56500,-93,504],[57000,-91,506],[57500,-89,508],[58000,-87,510],[58500,-85,511],[59000,-84,513],[59500,-82,515],[60000,-80,517],[60500,-78,519],[61000,-76,521],[61500,-74,522],[62000,-73,524],[62500,-71,526],[63000,-69,528],[63500,-67,530],[64000,-65,532],[64500,-63,533],[65000,-62,535],[65500,-60,537],[66000,-58,539],[66500,-56,541],[67000,-54,543],[67500,-52,544],[68000,-51,546],[68500,-49,548],[69000,-47,550],[69500,-45,552],[70000,-43,554],[70500,-41,555],[71000,-40,557],[71500,-38,559],[72000,-36,561],[72500,-34,563],[73000,-32,565],[73500,-30,566],[74000,-29,568],[74500,-27,570],[75000,-25,572],[75500,-23,574],[76000,-21,576],[76500,-19,577],[77000,-18,579],[77500,-16,581],[78000,-14,583],[78500,-12,585],[79000,-10,587],[79500,-8,588],[80000,-7,590],[80500,-5,592],[81000,-3,594],[81500,-1,596],[82000,1,598],[82500,3,599],[83000,4,601],[83500,6,603],[84000,8,605],[84500,10,607],[85000,12,609],[85500,14,610],[86000,15,612],[86500,17,614],[87000,19,616],[87500,21,618],[88000,23,620],[88500,25,621],[89000,26,623],[89500,28,625],[90000,30,627],[90500,32,629],[91000,34,631],[91500,36,632],[92000,37,634],[92500,39,636],[93000,41,638],[93500,43,640],[94000,45,642],[94500,47,643],[95000,48,645],[95500,50,647],[96000,52,649],[96500,54,651],[97000,56,653],[97500,58,654],[98000,59,656],[98500,61,658],[99000,63,660],[99500,65,662],[100000,67,664],[100500,69,665],[101000,70,667],[101500,72,669],[102000,74,671],[102500,76,673],[103000,78,675],[103500,80,676],[104000,81,678],[104500,83,680],[105000,85,682],[105500,87,684],[106000,89,686],[107000,92,689],[108000,96,693],[109000,100,697],[110000,103,700],[111000,107,704],[112000,111,708],[113000,114,711],[114000,118,715],[115000,122,719],[116000,125,722],[117000,129,726],[118000,133,730],[119000,136,733],[120000,140,737],[121000,144,741],[122000,147,744],[123000,151,748],[124000,155,752],[125000,158,755],[126000,162,759],[127000,166,763],[128000,169,766],[129000,173,770],[130000,177,774],[131000,180,777],[132000,184,781],[133000,188,785],[134000,191,788],[135000,195,792],[136000,199,796],[137000,202,799],[138000,206,803],[139000,210,807],[140000,213,810],[141000,217,814],[142000,221,818],[143000,224,821],[144000,228,825],[145000,232,829],[146000,235,832],[147000,239,836],[148000,243,840],[149000,246,843],[150000,250,847],[151000,254,851],[152000,257,854],[153000,261,858],[154000,265,862],[155000,268,865],[156000,272,869],[157000,276,873],[158000,279,876],[159000,283,880],[160000,287,884],[161000,290,887],[162000,294,891],[163000,298,895],[164000,301,898],[165000,305,902],[166000,309,906],[167000,312,909],[168000,316,913],[169000,320,917],[170000,323,920],[171000,327,924],[172000,331,928],[173000,334,931],[174000,338,935],[175000,342,939],[176000,345,942],[177000,349,946],[178000,353,950],[179000,356,953],[180000,360,957],[181000,364,961],[182000,367,964],[183000,371,968],[184000,375,972],[185000,378,975],[186000,382,979],[187000,386,983],[188000,389,986],[189000,393,990],[190000,397,994],[191000,400,997],[192000,404,1001],[193000,408,1005],[194000,411,1008],[195000,415,1012],[196000,419,1016],[197000,422,1019],[198000,426,1023],[199000,430,1027],[200000,433,1030],[201000,437,1034],[202000,441,1038],[203000,444,1041],[204000,448,1045],[205000,452,1049],[206000,455,1052],[207000,459,1056],[208000,463,1060],[209000,466,1063],[210000,470,1067],[211000,474,1071],[212000,477,1074],[213000,481,1078],[214000,485,1082],[215000,488,1085],[216000,492,1089],[217000,496,1093],[218000,499,1096],[219000,503,1100],[220000,507,1104],[221000,510,1107],[222000,514,1111],[223000,518,1115],[224000,521,1118],[225000,525,1122],[226000,529,1126],[227000,532,1129],[228000,536,1133],[229000,540,1137],[230000,543,1140],[231000,547,1144],[232000,551,1148],[233000,554,1151],[234000,558,1155],[235000,562,1159],[236000,565,1162],[237000,569,1166],[238000,573,1170],[239000,576,1173],[240000,580,1177],[241000,584,1181],[242000,587,1184],[243000,591,1188],[244000,595,1192],[245000,598,1195],[246000,602,1199],[247000,606,1203],[248000,609,1206],[249000,613,1210],[250000,617,1214],[251000,620,1217],[252000,624,1221],[253000,628,1225],[254000,631,1228],[255000,635,1232],[256000,639,1236],[257500,644,1241],[259000,650,1247],[260500,655,1252],[262000,661,1258],[263500,666,1263],[265000,672,1269],[266500,677,1274],[268000,683,1280],[269500,688,1285],[271000,694,1291],[272500,699,1296],[274000,705,1302],[275500,710,1307],[277000,716,1313],[278500,721,1318],[280000,727,1324],[281500,732,1329],[283000,738,1335],[284500,743,1340],[286000,749,1346],[287500,754,1351],[289000,760,1357],[290500,765,1362],[292000,771,1368],[293500,776,1373],[295000,782,1379],[296500,787,1384],[298000,793,1390],[299500,798,1395],[301000,804,1401],[302500,809,1406],[304000,815,1412],[305500,820,1417],[307000,826,1423],[308500,831,1428],[310000,837,1434],[311500,842,1439],[313000,848,1445],[314500,853,1450],[316000,859,1456],[317500,864,1461],[319000,870,1467],[320500,875,1472],[322000,881,1478],[323500,886,1483],[325000,892,1489],[326500,897,1494],[328000,903,1500],[329500,908,1505],[331000,914,1511],[332500,919,1516],[334000,925,1522],[335500,930,1527],[337000,936,1533],[338500,941,1538],[340000,947,1544],[341500,952,1549],[343000,958,1555],[344500,963,1560],[346000,969,1566],[347500,974,1571],[349000,980,1577],[350500,985,1582],[352000,991,1588],[353500,996,1593],[355000,1002,1599],[356500,1007,1604],[358000,1013,1610],[359500,1018,1615],[361000,1024,1621],[362500,1029,1626],[364000,1035,1632],[365500,1040,1637],[367000,1046,1643],[368500,1051,1648],[370000,1057,1654],[371500,1062,1659],[373000,1068,1665],[374500,1073,1670],[376000,1079,1676],[377500,1084,1681],[379000,1090,1687],[380500,1095,1692],[382000,1101,1698],[383500,1106,1703],[385000,1112,1709],[386500,1117,1714],[388000,1123,1720],[389500,1128,1725],[391000,1134,1731],[392500,1139,1736],[394000,1145,1742],[395500,1150,1747],[397000,1156,1753],[398500,1161,1758],[400000,1167,1764],[401500,1172,1769],[403000,1178,1775],[404500,1183,1780],[406000,1189,1786]];

let sprt_log_apx = [[6000,-312,284],[6500,-314,283],[7000,-315,282],[7500,-316,281],[8000,-317,280],[8500,-318,279],[9000,-319,278],[9500,-320,277],[10000,-321,276],[10500,-322,275],[11000,-323,274],[11500,-324,273],[12000,-325,272],[12500,-326,271],[13000,-327,270],[13500,-328,269],[14000,-329,268],[14500,-330,267],[15000,-331,266],[15500,-332,264],[16000,-333,263],[16500,-335,262],[17000,-336,261],[17500,-337,260],[18000,-338,259],[18500,-339,258],[19000,-340,257],[19500,-341,256],[20000,-342,255],[20500,-343,254],[21000,-344,253],[21500,-345,252],[22000,-346,251],[22500,-347,250],[23000,-348,249],[23500,-349,248],[24000,-350,247],[24500,-351,246],[25000,-352,245],[25500,-353,244],[26000,-354,242],[26500,-355,241],[27000,-357,240],[27500,-358,239],[28000,-359,238],[28500,-360,237],[29000,-361,236],[29500,-362,235],[30000,-363,234],[30500,-364,233],[31000,-365,232],[31500,-366,231],[32000,-367,230],[32500,-368,229],[33000,-369,228],[33500,-370,227],[34000,-371,226],[34500,-372,225],[35000,-373,224],[35500,-374,223],[36000,-375,222],[36500,-376,220],[37000,-377,219],[37500,-379,218],[38000,-380,217],[38500,-381,216],[39000,-382,215],[39500,-383,214],[40000,-384,213],[40500,-385,212],[41000,-386,211],[41500,-387,210],[42000,-388,209],[42500,-389,208],[43000,-390,207],[43500,-391,206],[44000,-392,205],[44500,-393,204],[45000,-394,203],[45500,-395,202],[46000,-396,201],[46500,-397,200],[47000,-398,198],[47500,-399,197],[48000,-401,196],[48500,-402,195],[49000,-403,194],[49500,-404,193],[50000,-405,192],[50500,-406,191],[51000,-407,190],[51500,-408,189],[52000,-409,188],[52500,-410,187],[53000,-411,186],[53500,-412,185],[54000,-413,184],[54500,-414,183],[55000,-415,182],[55500,-416,181],[56000,-417,180],[56500,-418,179],[57000,-419,178],[57500,-420,176],[58000,-421,175],[58500,-423,174],[59000,-424,173],[59500,-425,172],[60000,-426,171],[60500,-427,170],[61000,-428,169],[61500,-429,168],[62000,-430,167],[62500,-431,166],[63000,-432,165],[63500,-433,164],[64000,-434,163],[64500,-435,162],[65000,-436,161],[65500,-437,160],[66000,-438,159],[66500,-439,158],[67000,-440,157],[67500,-441,156],[68000,-442,154],[68500,-443,153],[69000,-445,152],[69500,-446,151],[70000,-447,150],[70500,-448,149],[71000,-449,148],[71500,-450,147],[72000,-451,146],[72500,-452,145],[73000,-453,144],[73500,-454,143],[74000,-455,142],[74500,-456,141],[75000,-457,140],[75500,-458,139],[76000,-459,138],[76500,-460,137],[77000,-461,136],[77500,-462,135],[78000,-463,134],[78500,-464,132],[79000,-465,131],[79500,-467,130],[80000,-468,129],[80500,-469,128],[81000,-470,127],[81500,-471,126],[82000,-472,125],[82500,-473,124],[83000,-474,123],[83500,-475,122],[84000,-476,121],[84500,-477,120],[85000,-478,119],[85500,-479,118],[86000,-480,117],[86500,-481,116],[87000,-482,115],[87500,-483,114],[88000,-484,113],[88500,-485,112],[89000,-486,110],[89500,-488,109],[90000,-489,108],[90500,-490,107],[91000,-491,106],[91500,-492,105],[92000,-493,104],[92500,-494,103],[93000,-495,102],[93500,-496,101],[94000,-497,100],[94500,-498,99],[95000,-499,98],[95500,-500,97],[96000,-501,96],[96500,-502,95],[97000,-503,94],[97500,-504,93],[98000,-505,92],[98500,-506,91],[99000,-507,90],[99500,-508,88],[100000,-510,87],[100500,-511,86],[101000,-512,85],[101500,-513,84],[102000,-514,83],[102500,-515,82],[103000,-516,81],[103500,-517,80],[104000,-518,79],[104500,-519,78],[105000,-520,77],[105500,-521,76],[106000,-522,75],[107000,-524,73],[108000,-526,71],[109000,-528,69],[110000,-530,66],[111000,-533,64],[112000,-535,62],[113000,-537,60],[114000,-539,58],[115000,-541,56],[116000,-543,54],[117000,-545,52],[118000,-547,50],[119000,-549,48],[120000,-551,46],[121000,-554,43],[122000,-556,41],[123000,-558,39],[124000,-560,37],[125000,-562,35],[126000,-564,33],[127000,-566,31],[128000,-568,29],[129000,-570,27],[130000,-572,25],[131000,-574,22],[132000,-577,20],[133000,-579,18],[134000,-581,16],[135000,-583,14],[136000,-585,12],[137000,-587,10],[138000,-589,8],[139000,-591,6],[140000,-593,4],[141000,-595,2],[142000,-598,-1],[143000,-600,-3],[144000,-602,-5],[145000,-604,-7],[146000,-606,-9],[147000,-608,-11],[148000,-610,-13],[149000,-612,-15],[150000,-614,-17],[151000,-616,-19],[152000,-618,-22],[153000,-621,-24],[154000,-623,-26],[155000,-625,-28],[156000,-627,-30],[157000,-629,-32],[158000,-631,-34],[159000,-633,-36],[160000,-635,-38],[161000,-637,-40],[162000,-639,-42],[163000,-642,-45],[164000,-644,-47],[165000,-646,-49],[166000,-648,-51],[167000,-650,-53],[168000,-652,-55],[169000,-654,-57],[170000,-656,-59],[171000,-658,-61],[172000,-660,-63],[173000,-662,-66],[174000,-665,-68],[175000,-667,-70],[176000,-669,-72],[177000,-671,-74],[178000,-673,-76],[179000,-675,-78],[180000,-677,-80],[181000,-679,-82],[182000,-681,-84],[183000,-683,-86],[184000,-686,-89],[185000,-688,-91],[186000,-690,-93],[187000,-692,-95],[188000,-694,-97],[189000,-696,-99],[190000,-698,-101],[191000,-700,-103],[192000,-702,-105],[193000,-704,-107],[194000,-706,-110],[195000,-709,-112],[196000,-711,-114],[197000,-713,-116],[198000,-715,-118],[199000,-717,-120],[200000,-719,-122],[201000,-721,-124],[202000,-723,-126],[203000,-725,-128],[204000,-727,-130],[205000,-730,-133],[206000,-732,-135],[207000,-734,-137],[208000,-736,-139],[209000,-738,-141],[210000,-740,-143],[211000,-742,-145],[212000,-744,-147],[213000,-746,-149],[214000,-748,-150],[215000,-750,-154],[216000,-753,-156],[217000,-755,-158],[218000,-757,-160],[219000,-759,-162],[220000,-761,-164],[221000,-763,-166],[222000,-765,-168],[223000,-767,-170],[224000,-769,-172],[225000,-771,-174],[226000,-774,-177],[227000,-776,-179],[228000,-778,-181],[229000,-780,-183],[230000,-782,-185],[231000,-784,-187],[232000,-786,-189],[233000,-788,-191],[234000,-790,-193],[235000,-792,-195],[236000,-794,-198],[237000,-797,-200],[238000,-799,-202],[239000,-801,-204],[240000,-803,-206],[241000,-805,-208],[242000,-807,-210],[243000,-809,-212],[244000,-811,-214],[245000,-813,-216],[246000,-815,-218],[247000,-818,-221],[248000,-820,-223],[249000,-822,-225],[250000,-824,-227],[251000,-826,-229],[252000,-828,-231],[253000,-830,-233],[254000,-832,-235],[255000,-834,-237],[256000,-836,-239],[257500,-840,-243],[259000,-843,-246],[260500,-846,-249],[262000,-849,-252],[263500,-852,-255],[265000,-855,-258],[266500,-858,-261],[268000,-862,-265],[269500,-865,-268],[271000,-868,-271],[272500,-871,-274],[274000,-874,-277],[275500,-877,-280],[277000,-880,-283],[278500,-884,-287],[280000,-887,-290],[281500,-890,-293],[283000,-893,-296],[284500,-896,-299],[286000,-899,-302],[287500,-902,-305],[289000,-906,-309],[290500,-909,-312],[292000,-912,-315],[293500,-915,-318],[295000,-918,-321],[296500,-921,-324],[298000,-924,-327],[299500,-928,-331],[301000,-931,-334],[302500,-934,-337],[304000,-937,-340],[305500,-940,-343],[307000,-943,-346],[308500,-946,-349],[310000,-950,-353],[311500,-953,-356],[313000,-956,-359],[314500,-959,-362],[316000,-962,-365],[317500,-965,-368],[319000,-968,-371],[320500,-972,-375],[322000,-975,-378],[323500,-978,-381],[325000,-981,-384],[326500,-984,-387],[328000,-987,-390],[329500,-990,-393],[331000,-994,-397],[332500,-997,-400],[334000,-1000,-403],[335500,-1003,-406],[337000,-1006,-409],[338500,-1009,-412],[340000,-1012,-415],[341500,-1016,-419],[343000,-1019,-422],[344500,-1022,-425],[346000,-1025,-428],[347500,-1028,-431],[349000,-1031,-434],[350500,-1034,-437],[352000,-1038,-441],[353500,-1041,-444],[355000,-1044,-447],[356500,-1047,-450],[358000,-1050,-453],[359500,-1053,-456],[361000,-1056,-459],[362500,-1060,-463],[364000,-1063,-466],[365500,-1066,-469],[367000,-1069,-472],[368500,-1072,-475],[370000,-1075,-478],[371500,-1078,-481],[373000,-1082,-485],[374500,-1085,-488],[376000,-1088,-491],[377500,-1091,-494],[379000,-1094,-497],[380500,-1097,-500],[382000,-1100,-503],[383500,-1104,-507],[385000,-1107,-510],[386500,-1110,-513],[388000,-1113,-516],[389500,-1116,-519],[391000,-1119,-522],[392500,-1122,-525],[394000,-1126,-529],[395500,-1129,-532],[397000,-1132,-535],[398500,-1135,-538],[400000,-1138,-541],[401500,-1141,-544],[403000,-1144,-547],[404500,-1148,-551],[406000,-1151,-554]];

let sprt60_log_apx = [[6000,-312,284],[6500,-314,283],[7000,-315,282],[7500,-316,281],[8000,-317,280],[8500,-318,279],[9000,-319,278],[9500,-320,277],[10000,-321,276],[10500,-322,275],[11000,-323,274],[11500,-324,273],[12000,-325,272],[12500,-326,271],[13000,-327,270],[13500,-328,269],[14000,-329,268],[14500,-330,267],[15000,-331,266],[15500,-332,264],[16000,-333,263],[16500,-335,262],[17000,-336,261],[17500,-337,260],[18000,-338,259],[18500,-339,258],[19000,-340,257],[19500,-341,256],[20000,-342,255],[20500,-343,254],[21000,-344,253],[21500,-345,252],[22000,-346,251],[22500,-347,250],[23000,-348,249],[23500,-349,248],[24000,-350,247],[24500,-351,246],[25000,-352,245],[25500,-353,244],[26000,-354,242],[26500,-355,241],[27000,-357,240],[27500,-358,239],[28000,-359,238],[28500,-360,237],[29000,-361,236],[29500,-362,235],[30000,-363,234],[30500,-364,233],[31000,-365,232],[31500,-366,231],[32000,-367,230],[32500,-368,229],[33000,-369,228],[33500,-370,227],[34000,-371,226],[34500,-372,225],[35000,-373,224],[35500,-374,223],[36000,-375,222],[36500,-376,220],[37000,-377,219],[37500,-379,218],[38000,-380,217],[38500,-381,216],[39000,-382,215],[39500,-383,214],[40000,-384,213],[40500,-385,212],[41000,-386,211],[41500,-387,210],[42000,-388,209],[42500,-389,208],[43000,-390,207],[43500,-391,206],[44000,-392,205],[44500,-393,204],[45000,-394,203],[45500,-395,202],[46000,-396,201],[46500,-397,200],[47000,-398,198],[47500,-399,197],[48000,-401,196],[48500,-402,195],[49000,-403,194],[49500,-404,193],[50000,-405,192],[50500,-406,191],[51000,-407,190],[51500,-408,189],[52000,-409,188],[52500,-410,187],[53000,-411,186],[53500,-412,185],[54000,-413,184],[54500,-414,183],[55000,-415,182],[55500,-416,181],[56000,-417,180],[56500,-418,179],[57000,-419,178],[57500,-420,176],[58000,-421,175],[58500,-423,174],[59000,-424,173],[59500,-425,172],[60000,-426,171],[60500,-427,170],[61000,-428,169],[61500,-429,168],[62000,-430,167],[62500,-431,166],[63000,-432,165],[63500,-433,164],[64000,-434,163],[64500,-435,162],[65000,-436,161],[65500,-437,160],[66000,-438,159],[66500,-439,158],[67000,-440,157],[67500,-441,156],[68000,-442,154],[68500,-443,153],[69000,-445,152],[69500,-446,151],[70000,-447,150],[70500,-448,149],[71000,-449,148],[71500,-450,147],[72000,-451,146],[72500,-452,145],[73000,-453,144],[73500,-454,143],[74000,-455,142],[74500,-456,141],[75000,-457,140],[75500,-458,139],[76000,-459,138],[76500,-460,137],[77000,-461,136],[77500,-462,135],[78000,-463,134],[78500,-464,132],[79000,-465,131],[79500,-467,130],[80000,-468,129],[80500,-469,128],[81000,-470,127],[81500,-471,126],[82000,-472,125],[82500,-473,124],[83000,-474,123],[83500,-475,122],[84000,-476,121],[84500,-477,120],[85000,-478,119],[85500,-479,118],[86000,-480,117],[86500,-481,116],[87000,-482,115],[87500,-483,114],[88000,-484,113],[88500,-485,112],[89000,-486,110],[89500,-488,109],[90000,-489,108],[90500,-490,107],[91000,-491,106],[91500,-492,105],[92000,-493,104],[92500,-494,103],[93000,-495,102],[93500,-496,101],[94000,-497,100],[94500,-498,99],[95000,-499,98],[95500,-500,97],[96000,-501,96],[96500,-502,95],[97000,-503,94],[97500,-504,93],[98000,-505,92],[98500,-506,91],[99000,-507,90],[99500,-508,88],[100000,-510,87],[100500,-511,86],[101000,-512,85],[101500,-513,84],[102000,-514,83],[102500,-515,82],[103000,-516,81],[103500,-517,80],[104000,-518,79],[104500,-519,78],[105000,-520,77],[105500,-521,76],[106000,-522,75],[107000,-524,73],[108000,-526,71],[109000,-528,69],[110000,-530,66],[111000,-533,64],[112000,-535,62],[113000,-537,60],[114000,-539,58],[115000,-541,56],[116000,-543,54],[117000,-545,52],[118000,-547,50],[119000,-549,48],[120000,-551,46],[121000,-554,43],[122000,-556,41],[123000,-558,39],[124000,-560,37],[125000,-562,35],[126000,-564,33],[127000,-566,31],[128000,-568,29],[129000,-570,27],[130000,-572,25],[131000,-574,22],[132000,-577,20],[133000,-579,18],[134000,-581,16],[135000,-583,14],[136000,-585,12],[137000,-587,10],[138000,-589,8],[139000,-591,6],[140000,-593,4],[141000,-595,2],[142000,-598,-1],[143000,-600,-3],[144000,-602,-5],[145000,-604,-7],[146000,-606,-9],[147000,-608,-11],[148000,-610,-13],[149000,-612,-15],[150000,-614,-17],[151000,-616,-19],[152000,-618,-22],[153000,-621,-24],[154000,-623,-26],[155000,-625,-28],[156000,-627,-30],[157000,-629,-32],[158000,-631,-34],[159000,-633,-36],[160000,-635,-38],[161000,-637,-40],[162000,-639,-42],[163000,-642,-45],[164000,-644,-47],[165000,-646,-49],[166000,-648,-51],[167000,-650,-53],[168000,-652,-55],[169000,-654,-57],[170000,-656,-59],[171000,-658,-61],[172000,-660,-63],[173000,-662,-66],[174000,-665,-68],[175000,-667,-70],[176000,-669,-72],[177000,-671,-74],[178000,-673,-76],[179000,-675,-78],[180000,-677,-80],[181000,-679,-82],[182000,-681,-84],[183000,-683,-86],[184000,-686,-89],[185000,-688,-91],[186000,-690,-93],[187000,-692,-95],[188000,-694,-97],[189000,-696,-99],[190000,-698,-101],[191000,-700,-103],[192000,-702,-105],[193000,-704,-107],[194000,-706,-110],[195000,-709,-112],[196000,-711,-114],[197000,-713,-116],[198000,-715,-118],[199000,-717,-120],[200000,-719,-122],[201000,-721,-124],[202000,-723,-126],[203000,-725,-128],[204000,-727,-130],[205000,-730,-133],[206000,-732,-135],[207000,-734,-137],[208000,-736,-139],[209000,-738,-141],[210000,-740,-143],[211000,-742,-145],[212000,-744,-147],[213000,-746,-149],[214000,-748,-150],[215000,-750,-154],[216000,-753,-156],[217000,-755,-158],[218000,-757,-160],[219000,-759,-162],[220000,-761,-164],[221000,-763,-166],[222000,-765,-168],[223000,-767,-170],[224000,-769,-172],[225000,-771,-174],[226000,-774,-177],[227000,-776,-179],[228000,-778,-181],[229000,-780,-183],[230000,-782,-185],[231000,-784,-187],[232000,-786,-189],[233000,-788,-191],[234000,-790,-193],[235000,-792,-195],[236000,-794,-198],[237000,-797,-200],[238000,-799,-202],[239000,-801,-204],[240000,-803,-206],[241000,-805,-208],[242000,-807,-210],[243000,-809,-212],[244000,-811,-214],[245000,-813,-216],[246000,-815,-218],[247000,-818,-221],[248000,-820,-223],[249000,-822,-225],[250000,-824,-227],[251000,-826,-229],[252000,-828,-231],[253000,-830,-233],[254000,-832,-235],[255000,-834,-237],[256000,-836,-239],[257500,-840,-243],[259000,-843,-246],[260500,-846,-249],[262000,-849,-252],[263500,-852,-255],[265000,-855,-258],[266500,-858,-261],[268000,-862,-265],[269500,-865,-268],[271000,-868,-271],[272500,-871,-274],[274000,-874,-277],[275500,-877,-280],[277000,-880,-283],[278500,-884,-287],[280000,-887,-290],[281500,-890,-293],[283000,-893,-296],[284500,-896,-299],[286000,-899,-302],[287500,-902,-305],[289000,-906,-309],[290500,-909,-312],[292000,-912,-315],[293500,-915,-318],[295000,-918,-321],[296500,-921,-324],[298000,-924,-327],[299500,-928,-331],[301000,-931,-334],[302500,-934,-337],[304000,-937,-340],[305500,-940,-343],[307000,-943,-346],[308500,-946,-349],[310000,-950,-353],[311500,-953,-356],[313000,-956,-359],[314500,-959,-362],[316000,-962,-365],[317500,-965,-368],[319000,-968,-371],[320500,-972,-375],[322000,-975,-378],[323500,-978,-381],[325000,-981,-384],[326500,-984,-387],[328000,-987,-390],[329500,-990,-393],[331000,-994,-397],[332500,-997,-400],[334000,-1000,-403],[335500,-1003,-406],[337000,-1006,-409],[338500,-1009,-412],[340000,-1012,-415],[341500,-1016,-419],[343000,-1019,-422],[344500,-1022,-425],[346000,-1025,-428],[347500,-1028,-431],[349000,-1031,-434],[350500,-1034,-437],[352000,-1038,-441],[353500,-1041,-444],[355000,-1044,-447],[356500,-1047,-450],[358000,-1050,-453],[359500,-1053,-456],[361000,-1056,-459],[362500,-1060,-463],[364000,-1063,-466],[365500,-1066,-469],[367000,-1069,-472],[368500,-1072,-475],[370000,-1075,-478],[371500,-1078,-481],[373000,-1082,-485],[374500,-1085,-488],[376000,-1088,-491],[377500,-1091,-494],[379000,-1094,-497],[380500,-1097,-500],[382000,-1100,-503],[383500,-1104,-507],[385000,-1107,-510],[386500,-1110,-513],[388000,-1113,-516],[389500,-1116,-519],[391000,-1119,-522],[392500,-1122,-525],[394000,-1126,-529],[395500,-1129,-532],[397000,-1132,-535],[398500,-1135,-538],[400000,-1138,-541],[401500,-1141,-544],[403000,-1144,-547],[404500,-1148,-551],[406000,-1151,-554]];


function sprt60_lookup(key, idx=1){
    let start = 1;
    let end = sprt60_apx.length - 1;
    if(key <= sprt60_apx[0][0]) return sprt60_apx[0][idx];

    let i = 0;
    for (; i < 50; i++) {
        let middle = Math.floor((start + end) / 2);
        //console.log("start: "+start+" middle: "+middle+" end: "+end+" key: "+key+" apxl: "+sprt60_apx[middle-1][0]+" apxr: "+sprt60_apx[middle][0]);
        if (sprt60_apx[middle-1][0] <= key && sprt60_apx[middle][0] >= key) {
            // found the key
            let apx_frac = (key-sprt60_apx[middle-1][0])/(sprt60_apx[middle][0]-sprt60_apx[middle-1][0])
            let apx = apx_frac*sprt60_apx[middle][idx]+(1-apx_frac)*sprt60_apx[middle-1][idx]
            return apx;
        } else if (sprt60_apx[middle][0] <= key) {
            // continue searching to the right
            start = middle;
        } else {
            // search searching to the left
            end = middle;
        }
    }
	// key wasn't found
    return sprt60_apx[sprt60_apx.length - 1][idx];
}

function sprt_lookup(key, idx=1){
    let start = 1;
    let end = sprt_apx.length - 1;
    if(key <= sprt_apx[0][0]) return sprt_apx[0][idx];

    let i = 0;
    for (; i < 50; i++) {
        let middle = Math.floor((start + end) / 2);
        //console.log("start: "+start+" middle: "+middle+" end: "+end+" key: "+key+" apxl: "+sprt_apx[middle-1][0]+" apxr: "+sprt_apx[middle][0]);
        if (sprt_apx[middle-1][0] <= key && sprt_apx[middle][0] >= key) {
            // found the key
            let apx_frac = (key-sprt_apx[middle-1][0])/(sprt_apx[middle][0]-sprt_apx[middle-1][0])
            let apx = apx_frac*sprt_apx[middle][idx]+(1-apx_frac)*sprt_apx[middle-1][idx]
            return apx;
        } else if (sprt_apx[middle][0] <= key) {
            // continue searching to the right
            start = middle;
        } else {
            // search searching to the left
            end = middle;
        }
    }
	// key wasn't found
    return sprt_apx[sprt_apx.length - 1][idx];
}

function sprt_log_lookup(key, idx=1){
    let start = 1;
    let end = sprt_log_apx.length - 1;
    if(key <= sprt_log_apx[0][0]) return sprt_log_apx[0][idx];

    let i = 0;
    for (; i < 50; i++) {
        let middle = Math.floor((start + end) / 2);
        if (sprt_log_apx[middle-1][0] <= key && sprt_log_apx[middle][0] >= key) {
            // found the key
            let apx_frac = (key-sprt_log_apx[middle-1][0])/(sprt_log_apx[middle][0]-sprt_log_apx[middle-1][0])
            let apx = apx_frac*sprt_log_apx[middle][idx]+(1-apx_frac)*sprt_log_apx[middle-1][idx]
            return apx;
        } else if (sprt_log_apx[middle][0] <= key) {
            // continue searching to the right
            start = middle;
        } else {
            // search searching to the left
            end = middle;
        }
    }
	// key wasn't found
    return sprt_log_apx[sprt_log_apx.length - 1][idx];
}

function sprt60_log_lookup(key, idx=1){
    let start = 1;
    let end = sprt60_log_apx.length - 1;
    if(key <= sprt60_log_apx[0][0]) return sprt60_log_apx[0][idx];

    let i = 0;
    for (; i < 50; i++) {
        let middle = Math.floor((start + end) / 2);
        if (sprt60_log_apx[middle-1][0] <= key && sprt60_log_apx[middle][0] >= key) {
            // found the key
            let apx_frac = (key-sprt60_log_apx[middle-1][0])/(sprt60_log_apx[middle][0]-sprt60_log_apx[middle-1][0])
            let apx = apx_frac*sprt60_log_apx[middle][idx]+(1-apx_frac)*sprt60_log_apx[middle-1][idx]
            return apx;
        } else if (sprt60_log_apx[middle][0] <= key) {
            // continue searching to the right
            start = middle;
        } else {
            // search searching to the left
            end = middle;
        }
    }
	// key wasn't found
    return sprt60_log_apx[sprt60_log_apx.length - 1][idx];
}


function computeLb(total) {
    var name = document.getElementById("helper").getAttribute("data-name");
    if(name === "sprt60")
        return sprt60_lookup(total,1);
    if(name === "sprt60_log")
        return sprt60_log_lookup(total,1);
    if(name === "sprt_log")
        return sprt_log_lookup(total,1);
    return sprt_lookup(total,1);
}

function computeUb(total) {
    var name = document.getElementById("helper").getAttribute("data-name");
    if(name === "sprt60")
        return sprt60_lookup(total,2);
    if(name === "sprt60_log")
        return sprt60_log_lookup(total,2);
    if(name === "sprt_log")
        return sprt_log_lookup(total,2);
    return sprt_lookup(total,2);
}


var official_mmr = "";
var xhttp = new XMLHttpRequest();
xhttp.onreadystatechange = function () {
    if (this.readyState == 4) {
        //document.getElementById("demo").innerHTML =
        //this.responseText;
        var allText = this.responseText.replaceAll("<br>", "\n");
        document.foo = allText;
        console.log('ok');
        //alert(allText);
        //var my_arr = eval(allText);
        var my_arr = allText.split(/\r\n|\n|\<br\>|\r/);
        var rev_arr = my_arr.reverse();
        var my_simplified_arr = [];
        //alert(rev_arr[2]);
        //424,33,29,362,0.09,3.278
        //$row["total"]. "," . $row["wins"]. "," . $row["losses"]. "," . $row["draws"]."," . $row["llr"]."," . round($row["elo"],3)
        
        var wins = [];
        var losses = [];
        var wl_diff = [];
        var draws = [];
        var elo = [];
        var llr_plot = [];
        var upper_hull = [];
        var lower_hull = [];
        var max_games = 0;
        var idx_min_games = 0;
        for (counter = 0; counter < rev_arr.length; counter++) 
        {
            var data = rev_arr[counter].split(',');
            //alert("New entry, x: "+rev_arr[counter][0]+" y: "+rev_arr[counter][4]);
            wl_diff.push({x: ''+data[0], y: parseFloat(data[1])-parseFloat(data[2])});
            wins.push({x: ''+data[0], y: parseFloat(data[1])});
            losses.push({x: ''+data[0], y: parseFloat(data[2])});
            draws.push({x: ''+data[0], y: parseFloat(data[3])});
            llr_plot.push({x: ''+data[0], y: parseFloat(data[4])});
            elo.push({x: ''+data[0], y: parseFloat(data[5])});
            if(parseInt(data[0])> max_games) {
                max_games = parseInt(data[0]);
            }
            if(parseInt(data[0]) < 2500) {
                idx_min_games = counter;
            }
	    if(parseInt(data[0]) > 2000) {
                upper_hull.push({x: ''+data[0], y: computeUb(parseFloat(data[0]))});
                lower_hull.push({x: ''+data[0], y: computeLb(parseFloat(data[0]))});
	    }
            //console.log("x: " + counter+ " y: " + data[4]);
        }
        console.log("Max games: "+max_games);
        let draw_rate = -1.;
        let sprt_adjust = 1.;
        var name = document.getElementById("helper").getAttribute("data-name");
        if (max_games >= 8000) {
            wl_diff = wl_diff.slice(idx_min_games);
            elo = elo.slice(idx_min_games);
            draw_rate = draws[draws.length - 1].y / draws[draws.length - 1].x;
            if((name === "sprt60") || (name === "sprt60_log"))
                sprt_adjust = (1 - draw_rate)/(1 - 0.47);
            else
                sprt_adjust = (1 - draw_rate)/(1 - 0.47);
            last_wl_diff = parseFloat(rev_arr[rev_arr.length-1].split(',')[1])-parseFloat(rev_arr[rev_arr.length-1].split(',')[2]);
            last_llr = parseFloat(rev_arr[rev_arr.length-1].split(',')[4]);
            last_upper = upper_hull[upper_hull.length-1]['y'];
            last_lower = lower_hull[lower_hull.length-1]['y'];
            last_spread = (last_upper-last_lower)*0.5;
            last_midpoint = (upper_hull[upper_hull.length-1].y+lower_hull[lower_hull.length-1].y)*0.5;
            if ((last_llr > 0 && last_wl_diff > last_midpoint) || (last_llr < 0 && last_wl_diff < last_midpoint)) {
              cur_prog = last_wl_diff - last_midpoint;
              extrpol = Math.abs(last_llr/2.95);
              if(last_upper != last_midpoint && last_lower != last_midpoint) {
                  if(last_llr > 0) {
                    qpol = Math.abs((last_wl_diff-last_midpoint)/(last_spread));
                  }
                  else {
                    qpol = Math.abs((last_wl_diff-last_midpoint)/(last_spread));
                  }
                  sprt_adjust = qpol/extrpol;
              }
            }
            
        }
        //sprt_adjust *= 0.88;
        console.log("Draw rate: "+draw_rate+" adjust: "+sprt_adjust);
        //alert(llr_plot);
        // Adjust to draw rate
        for (counter = 0; counter < upper_hull.length; counter++) 
        {
            let midpoint = (upper_hull[counter].y+lower_hull[counter].y)*0.5;
            let spread = (upper_hull[counter].y-lower_hull[counter].y)*0.5*sprt_adjust;
            let new_up = midpoint+spread;
            let new_low = midpoint-spread;
            upper_hull[counter].y = new_up;
            lower_hull[counter].y = new_low;
        }
        
        var dataset_1 = {
           fill: false,
           label: 'Reject (LLR=-2.95)',
           pointRadius: 0,
           borderDash: [5, 5],
           data:  lower_hull,
           borderColor: '#f63414',
           backgroundColor: '#f63414',           
           lineTension: 0.3
        };
        var dataset_11 = {
           fill: false,
           label: 'Accept (LLR=+2.95)',
           pointRadius: 0,
           borderDash: [5, 5],
           data:  upper_hull,
           borderColor: '#27da09',
           backgroundColor: '#27da09',
           lineTension: 0.3
        };
        var dataset_2 = {
           fill: false,
           label: 'Win-Losses',
           data:  wl_diff,
           borderColor: '#f6a820',
           backgroundColor: '#f6a820',
           lineTension: 0.1
        };
        
        var dataset_3 = {
           fill: false,
           yAxisID: 'y1',
           label: 'Elo',
           data:  elo,
           borderColor: '#92d7ff',
           backgroundColor: '#92d7ff',           
           lineTension: 0.1
        };
        
        var dataset_4 = {
           fill: false,
           yAxisID: 'y1',
           label: 'LLR',
           data:  llr_plot,
           borderColor: '#ffba00',
           backgroundColor: '#ffba00',           
           lineTension: 0
        };
        
        var name = document.getElementById("helper").getAttribute("data-name");
        var mydata = {
            // Labels should be Date objects
            datasets: [dataset_3, dataset_2, dataset_1, dataset_11]
        };
        if(!name.includes("sprt")) {
            mydata = {
            // Labels should be Date objects
            datasets: [dataset_3, dataset_2]
           };
        }
        var ctx = document.getElementById("myChart");
        window.myLine = new Chart(ctx, {
            type: "line",
            options: {
               scales: {
                x: {
                  type: 'linear',
                  display: true,
                  scaleLabel: {
                    display: true,
                    labelString: 'Date'
                  },
                  ticks: {
                    major: {
                      enabled: true
                    },
                    fontStyle: function(context) {
                      return context.tick && context.tick.major ? 'bold' : undefined;
                    },
                    fontColor: function(context) {
                      return context.tick && context.tick.major ? '#FF0000' : undefined;
                    }
                  }
                },
                y: {
                  display: true,
                  position: 'right',
                },
                y1: {
                    type: 'linear',
                    display: true,
                    position: 'left',

                    // grid line settings
                    grid: {
                      drawOnChartArea: false, // only want the grid lines for one axis to show up
                    },
                }
              },
              plugins: {
 zoom: {
  // Container for pan options
  pan: {
   // Boolean to enable panning
   enabled: false,

   // Panning directions. Remove the appropriate direction to disable
   // Eg. 'y' would only allow panning in the y direction
   // A function that is called as the user is panning and returns the
   // available directions can also be used:
   //   mode: function({ chart }) {
   //     return 'xy';
   //   },
   mode: 'xy',

   // Which of the enabled panning directions should only be available
   // when the mouse cursor is over one of scale.
   overScaleMode: 'xy',

   rangeMin: {
    // Format of min pan range depends on scale type
    x: null,
    y: null
   },
   rangeMax: {
    // Format of max pan range depends on scale type
    x: null,
    y: null
   },

   // On category scale, factor of pan velocity
   speed: 20,

   // Minimal pan distance required before actually applying pan
   threshold: 10,

   // Function called while the user is panning
   onPan: function({chart}) { console.log(`I'm panning!!!`); },
   // Function called once panning is completed
   onPanComplete: function({chart}) { console.log(`I was panned!!!`); },
   // Function called when pan fails because modifier key was not detected.
   // event is the a hammer event that failed - see https://hammerjs.github.io/api#event-object
   onPanRejected: function({chart, event}) { console.log(`I didn't start panning!`); }
  },

  // Container for zoom options
  zoom: {
   // Boolean to enable zooming
   enabled: true,

   // Enable drag-to-zoom behavior
   drag: true,

   // Drag-to-zoom effect can be customized
   // drag: {
   //   borderColor: 'rgba(225,225,225,0.3)'
   //   borderWidth: 5,
   //   backgroundColor: 'rgb(225,225,225)',
   //   animationDuration: 0
   // },

   // Zooming directions. Remove the appropriate direction to disable
   // Eg. 'y' would only allow zooming in the y direction
   // A function that is called as the user is zooming and returns the
   // available directions can also be used:
   //   mode: function({ chart }) {
   //     return 'xy';
   //   },
   mode: 'xy',

   // Which of the enabled zooming directions should only be available
   // when the mouse cursor is over one of scale.
   overScaleMode: 'xy',

   rangeMin: {
    // Format of min zoom range depends on scale type
    x: null,
    y: null
   },
   rangeMax: {
    // Format of max zoom range depends on scale type
    x: null,
    y: null
   },

   // Speed of zoom via mouse wheel
   // (percentage of zoom on a wheel event)
   speed: 0.1,

   // Minimal zoom distance required before actually applying zoom
   threshold: 2,

   // On category scale, minimal zoom level before actually applying zoom
   sensitivity: 3,

   // Function called while the user is zooming
   onZoom: function({chart}) { console.log(`I'm zooming!!!`); },
   // Function called once zooming is completed
   onZoomComplete: function({chart}) { console.log(`I was zoomed!!!`); },
   // Function called when wheel input occurs without modifier key
   onZoomRejected: function({chart, event}) { console.log(`I didn't start zooming!`); }
  }
 }
}
              
            },
              data: mydata});
        
        }
        };

const queryString = window.location.search;
const urlParams = new URLSearchParams(queryString);

const testid = urlParams.get('test_id')

xhttp.open("GET", "data.php?test_id="+testid, true);

xhttp.send();

function resetZoom() {
    window.myLine.resetZoom();
}
